#!/usr/bin/env bash

public_ip= `wget http://ipecho.net/plain -O - -q ; echo`
mc_port=25565
port=${1:-${PORT:-8080}}

if [ -z "$NGROK_API_TOKEN" ]; then
  echo "You must set the NGROK_API_TOKEN config var to create a TCP tunnel!"
  exit 1
fi

# Download dropbox uploader config file
echo "-----> Configuring DU config file..."
CONFIG_FILE=~/.dropbox_uploader
RESPONSE_FILE="/tmp/du_resp_$RANDOM"
if [ ! -f "$CONFIG_FILE" ]; then
  echo "CONFIGFILE_VERSION=2.0" > "$CONFIG_FILE"
  echo "OAUTH_APP_KEY=$OAUTH_APP_KEY" >> "$CONFIG_FILE"
  echo "OAUTH_APP_SECRET=$OAUTH_APP_SECRET" >> "$CONFIG_FILE"
  if [ -z "$OAUTH_REFRESH_TOKEN" ]; then
    API_OAUTH_TOKEN="https://api.dropbox.com/oauth2/token"
    if [ -z "$access_code" ]; then
      echo "You must set the access_code config var to create Dropbox backups"
      exit 1
    else
      curl $API_OAUTH_TOKEN -d code=$access_code -d grant_type=authorization_code -u $OAUTH_APP_KEY:$OAUTH_APP_SECRET -o "$RESPONSE_FILE" 2>/dev/null
      OAUTH_REFRESH_TOKEN=$(sed -n 's/.*"refresh_token": "\([^"]*\).*/\1/p' "$RESPONSE_FILE")
    fi
  fi
  echo "OAUTH_REFRESH_TOKEN=$OAUTH_REFRESH_TOKEN" >> "$CONFIG_FILE"
  export OAUTH_REFRESH_TOKEN=$OAUTH_REFRESH_TOKEN
fi
echo " done"

# Start the TCP tunnel - remove - to run ngrok
echo "-----> Starting ngrok tunnel..."
ngrok_cmd="bin/ngrok tcp -authtoken $NGROK_API_TOKEN -log stdout --log-level debug ${NGROK_OPTS} ${mc_port}"
eval "$ngrok_cmd | tee ngrok.log &"
ngrok_pid=$!
 
# Installing Dropbox sync
echo "-----> Adding Dropbox Sync..."
curl "https://raw.githubusercontent.com/andreafabrizi/Dropbox-Uploader/master/dropbox_uploader.sh" -o dropbox_uploader.sh
mv dropbox_uploader.sh backup.sh
chmod +x backup.sh
# ./dropbox_uploader.sh help to list all options
# more info here https://github.com/andreafabrizi/Dropbox-Uploader
echo " done"

echo "-----> Starting Dropbox Sync..."
bak=backup.zip
./backup.sh download $bak
if [ $? -ne 0 ]; then
  bak=backup.zip.bak
  ./backup.sh download $bak
fi
unzip $bak
rm $bak
eval "while true; do sleep 300; ./backup.sh move backup.zip backup.zip.bak; zip -r backup $additional_files .dropbox_uploader world* mstore plugins server.properties bukkit.yml spigot.yml paper.yml banned-ips.json banned-players.json whitelist.json permissions.yml ops.json; ./backup.sh upload backup.zip /; ./backup.sh delete backup.zip.bak; done &"
echo " done"
dropbox_pid=$!

# Do an inline sync first, then start the background job
if [ -n "AWS_BUCKET" ]; then
	echo "-----> Start sync to AWS..."
	bin/sync
	eval "while true; do sleep ${AWS_SYNC_INTERVAL:-60}; bin/sync; done &"
	sync_pid=$!
fi

echo "-----> Configuring server settings..."
# accept eula
echo eula=true > eula.txt
# create server config - change anything if you want
echo "server-port=${mc_port}" >> /app/server.properties
echo "server-ip=127.0.0.1" >> /app/server.properties # add public ip to server
# disable online mode for cracked players
echo "online-mode=false" >> /app/server.properties
echo "enable-command-block=true" >> /app/server.properties
touch whitelist.json
touch banned-players.json
touch banned-ips.json
touch ops.json

echo "-----> Scaling dyno..."
limit=$(ulimit -u)
case $limit in
  512)   # 2X Dyno
  heap="768m"
  ;;
  32768) # PX Dyno
  heap="4g"
  ;;
  *)     # 1X Dyno
  heap="530m"
  ;;
esac
# dont worry if error R14 appear. unless you reach 1GB. server will stop.

export NGROKIP=$(./ngrokgetip)
echo "-----> NGROK IP: $NGROKIP"
echo "-----> Starting: PaperMC on port ${mc_port}"
eval "screen -L -h 2048 -dmS minecraft ./runserver"
main_pid=$!

echo "-----> Loading libraries... "

echo "-----> Loading completed ..."

echo "-----> Instalation completed <-----"

echo "-----> Hope you enjoy server <-----"
# Flush the logfile every second, and ensure that the logfile exists
screen -X "logfile 1" && sleep 1

echo "Tailing log"
#eval "tail -f screenlog.0 &"
tail_pid=$!

trap "kill $ngrok_pid $main_pid $sync_pid $tail_pid $dropbox_pid" SIGTERM
trap "kill -300 $ngrok_pid $main_pid $sync_pid $tail_pid $dropbox_pid exit" SIGKILL

eval "ruby -rwebrick -e'WEBrick::HTTPServer.new(:BindAddress => \"0.0.0.0\", :Port => ${port}, :MimeTypes => {\"rhtml\" => \"text/html\"}, :DocumentRoot => Dir.pwd + \"/web\").start' &"
if [ $? -ne 0 ]; then
  eval "py -m http.server ${port} --directory ./web/"
fi
eval "while true; do sleep 600; echo "Refreshing dyno"; echo $HEROKU_URL; curl $HEROKU_URL; done"
